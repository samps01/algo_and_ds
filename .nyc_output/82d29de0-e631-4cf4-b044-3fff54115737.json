{"/Users/sam/Desktop/gl/algo_and_ds/app/algorithms/max-sum-subarray.js":{"path":"/Users/sam/Desktop/gl/algo_and_ds/app/algorithms/max-sum-subarray.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"2":{"start":{"line":12,"column":15},"end":{"line":12,"column":63}},"3":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"4":{"start":{"line":16,"column":8},"end":{"line":16,"column":20}},"5":{"start":{"line":19,"column":17},"end":{"line":19,"column":23}},"6":{"start":{"line":20,"column":21},"end":{"line":20,"column":27}},"7":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"8":{"start":{"line":22,"column":17},"end":{"line":22,"column":18}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":59}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":46}},"11":{"start":{"line":26,"column":4},"end":{"line":26,"column":18}},"12":{"start":{"line":29,"column":0},"end":{"line":29,"column":25}}},"fnMap":{"0":{"name":"maxSumSubArray","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":23}},"loc":{"start":{"line":14,"column":29},"end":{"line":27,"column":1}},"line":14}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},{"start":{"line":15,"column":4},"end":{"line":17,"column":5}}],"line":15}},"s":{"0":1,"1":1,"2":1,"3":3,"4":0,"5":3,"6":3,"7":3,"8":3,"9":32,"10":32,"11":3,"12":1},"f":{"0":3},"b":{"0":[0,3]},"inputSourceMap":{"version":3,"sources":["max-sum-subarray.js"],"names":["maxSumSubArray","inputArr","arr","length","maxSum","currentSum","i","Math","max"],"mappings":";;;;;QAQgBA,c,GAAAA,c;AARhB;;;;;AAMA,IAAMC,WAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,CAAC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAAjB;;AAEO,SAASD,cAAT,CAAwBE,GAAxB,EAA6B;AAChC,QAAIA,IAAIC,MAAJ,KAAe,CAAnB,EAAsB;AAClB,eAAO,IAAP;AACH;;AAED,QAAIC,SAASF,IAAI,CAAJ,CAAb;AACA,QAAIG,aAAaH,IAAI,CAAJ,CAAjB;;AAEA,SAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,IAAIC,MAAxB,EAAgCG,GAAhC,EAAqC;AACjCD,qBAAaE,KAAKC,GAAL,CAASN,IAAII,CAAJ,CAAT,EAAiBD,aAAaH,IAAII,CAAJ,CAA9B,CAAb;AACAF,iBAASG,KAAKC,GAAL,CAASH,UAAT,EAAqBD,MAArB,CAAT;AACH;AACD,WAAOA,MAAP;AACH;;AAEDJ,eAAeC,QAAf;;AAEA;AACA","file":"max-sum-subarray.js","sourceRoot":"/Users/sam/Desktop/gl/algo_and_ds/app/algorithms","sourcesContent":["/**\n * Find max sum subarray from the given Array\n * Method 1 - Kadane's algorithm\n */\n\n\nconst inputArr = [5, 7, -3, 2, 9, 6, 16, 22, 21, 29, -14, 10, 12];\n\nexport function maxSumSubArray(arr) {\n    if (arr.length === 0) {\n        return null;\n    }\n\n    let maxSum = arr[0];\n    let currentSum = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        currentSum = Math.max(arr[i], currentSum + arr[i]);\n        maxSum = Math.max(currentSum, maxSum);\n    }\n    return maxSum;\n}\n\nmaxSumSubArray(inputArr);\n\n// TODO: Add method to return indices\n// TODO: Add test cases\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6bf29d0839beaa3b836571f210a7d49283c3ac1e","contentHash":"0269488c2d5a0778406b77b399476a00306dea961a93498a0020e77678775062"}}